generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attribute {
  id   Int    @id @default(autoincrement())
  name String @unique

  videos VideoAttributes[]

  @@map("attribute")
}

model Bookmark {
  id         Int @id @default(autoincrement())
  start      Int
  videoID    Int
  categoryID Int

  video    Video    @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category @relation(fields: [categoryID], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([videoID, start])
  @@map("bookmark")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  bookmarks Bookmark[]

  @@map("category")
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @unique

  videos VideoLocations[]

  @@map("location")
}

model Plays {
  id      Int      @id @default(autoincrement())
  time    DateTime @default(now())
  videoID Int

  video Video @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([videoID, time])
  @@map("plays")
}

model Site {
  id        Int    @id @default(autoincrement())
  name      String @unique
  websiteID Int

  website Website @relation(fields: [websiteID], references: [id], onDelete: Restrict, onUpdate: Cascade)

  videos Video[]

  @@map("site")
}

model StarAlias {
  id     Int    @id @default(autoincrement())
  name   String @unique
  starID Int

  star Star @relation(fields: [starID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("staralias")
}

model Star {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  image            String?   @unique
  haircolor        String?
  breast           String?
  ethnicity        String?
  birthdate        DateTime? @db.Date
  height           Int?
  weight           Int?
  autoTaggerIgnore Boolean   @default(false)
  api              String?   @unique @db.VarChar(36)

  alias  StarAlias[]
  videos Video[]

  @@map("star")
}

model VideoAttributes {
  attributeID Int
  videoID     Int

  attribute Attribute @relation(fields: [attributeID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  video     Video     @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([attributeID, videoID])
  @@map("videoattributes")
}

model VideoLocations {
  locationID Int
  videoID    Int

  location Location @relation(fields: [locationID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  video    Video    @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([locationID, videoID])
  @@map("videolocations")
}

model Video {
  id          Int      @id @default(autoincrement())
  name        String
  path        String   @unique
  date        DateTime @db.Date
  duration    Int      @default(0)
  height      Int      @default(0)
  width       Int      @default(0)
  starAge     Int?
  siteID      Int?
  websiteID   Int
  starID      Int?
  thumbnail   Int      @default(100)
  added       DateTime @default(now()) @db.Date
  api         String?  @unique @db.VarChar(36)
  cover       String?  @unique
  apiDateHash String?  @db.Char(32)
  ignoreMeta  Boolean  @default(false)

  site    Site?   @relation(fields: [siteID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  website Website @relation(fields: [websiteID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  star    Star?   @relation(fields: [starID], references: [id], onDelete: SetNull, onUpdate: Cascade)

  attributes VideoAttributes[]
  locations  VideoLocations[]
  bookmarks  Bookmark[]
  plays      Plays[]

  @@map("video")
}

model Website {
  id   Int    @id @default(autoincrement())
  name String @unique

  sites  Site[]
  videos Video[]

  @@map("website")
}
